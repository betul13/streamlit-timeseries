# -*- coding: utf-8 -*-
"""GERMANY_ENERGY_CONSUMPTİON.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14e4N6-AoJPwm0qY28i0g5vlRngfiCfPZ

Almanya'nın 2015-2020 yılları arasında 5 yıllık güç tüketim verisi vardır.Bu projede zaman serileriyle 2021 yılı aylarında ne kadar tüketim olabileceği tahminini yapacağız
"""

import itertools
import warnings
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import statsmodels.api as sm
from sklearn.metrics import mean_absolute_error
from statsmodels.tsa.arima.model import ARIMA
# from statsmodels.tsa.holtwinters import ExponentialSmoothing
# from statsmodels.tsa.holtwinters import SimpleExpSmoothing
from statsmodels.tsa.seasonal import seasonal_decompose
import statsmodels.tsa.api as smt
from statsmodels.tsa.statespace.sarimax import SARIMAX
import streamlit as st

pd.set_option('display.max_columns', None)
pd.set_option('display.width', 500)
warnings.filterwarnings('ignore')

df = pd.read_csv(r"de.csv")
""" Start ve End aralığında yani 15 dk'da tüketilen güç MW cinsinden Load değişkeninde verilmiştir."""

#################################################
# EDA
#################################################

def check_df(dataframe, head = 5):
    print("######################################  Shape  ##################################")
    print(dataframe.shape)
    print("######################################  Types  ##################################")
    print(dataframe.dtypes)
    print("######################################  Head  ###################################")
    print(dataframe.head(head))
    print("######################################  Tail  ###################################")
    #print(dataframe.tail(head))
    print("#######################################  NA  ####################################")
    print(dataframe.isnull().sum())


check_df(df)

#Veri seti büyük ve eksik değer sayısı çok küçük olduğu için bu satırları çıkarıyorum.
df.dropna(inplace = True)
df.isnull().sum()

df["start"] = pd.to_datetime(df["start"])
df["end"] = pd.to_datetime(df["end"])

check_df(df)

df["date"] = df['end'].apply(lambda x: x.strftime('%Y-%m-%d')) #sadece tarih kısmını alır
df = df.drop(["start","end"], axis = 1) #bu verilere gerek kalmadı.Aylık harcanan güç miktarı yeterli olacaktır.
check_df(df)

df["date"] = pd.to_datetime(df["date"])

df = df.groupby("date").sum().reset_index()

df.head(100)

df_ = df[df['date'].dt.year == 2020]
df = df[df['date'].dt.year != 2020]

df_["date"] = df_['date'].dt.to_period('M')
df["date"] = df['date'].dt.to_period('M')

monthly_total_load = df.groupby('date')['load'].sum().reset_index()
monthly_total_load_2020 = df_.groupby('date')['load'].sum().reset_index()

monthly_total_load.tail(40)

df = monthly_total_load
df_ = monthly_total_load_2020

check_df(df)

df['date'] = df['date'].dt.to_timestamp()

# 'date' sütununu indeks olarak ayarla
df.set_index('date', inplace=True)

# Grafik çizimi
plt.figure(figsize=(10, 5))
plt.plot(df.index, df['load'], marker='o')
plt.xlabel('Tarih')
plt.ylabel('Toplam Güç Tüketimi')
plt.title('Aya Göre Güç Tüketimi')
plt.grid(True)
plt.show()

df_['date'] = df_['date'].dt.to_timestamp()

df.head()

df.tail()

check_df(df)

df.index = pd.to_datetime(df.index)
df_index = pd.to_datetime(df_.index)

df.tail()

y = df.index
y = df['load'].resample('MS').mean()
train = y[:'2017-12-31']
test = y['2018-01-01':]

def plot_energy_consumption(train, test, y_pred, title):
    mae = mean_absolute_error(test, y_pred)
    train.plot(legend=True, label="TRAIN", title=f"{title}, MAE: {round(mae,2)}")
    test.plot(legend=True, label="TEST", figsize=(10, 6))
    y_pred.plot(legend=True, label="PREDICTION")
    plt.show()

##################################################
# SARIMA(p, d, q): (Seasonal Autoregressive Integrated Moving-Average)
##################################################

model = SARIMAX(train, order=(1, 0, 1), seasonal_order=(0, 0, 0, 12))

sarima_model = model.fit()

y_pred_test = sarima_model.get_forecast(steps=24)

y_pred = y_pred_test.predicted_mean

y_pred = pd.Series(y_pred, index=test.index)

plot_energy_consumption(train, test, y_pred, "SARIMA")

############################
# Hyperparameter Optimization (Model Derecelerini Belirleme)
############################

p = d = q = range(0, 2)
pdq = list(itertools.product(p, d, q))
seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]


def sarima_optimizer_aic(train, pdq, seasonal_pdq):
    best_aic, best_order, best_seasonal_order = float("inf"), None, None
    for param in pdq:
        for param_seasonal in seasonal_pdq:
            try:
                sarimax_model = SARIMAX(train, order=param, seasonal_order=param_seasonal)
                results = sarimax_model.fit(disp=0)
                aic = results.aic
                if aic < best_aic:
                    best_aic, best_order, best_seasonal_order = aic, param, param_seasonal
                print('SARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, aic))
            except:
                continue
    print('SARIMA{}x{}12 - AIC:{}'.format(best_order, best_seasonal_order, best_aic))
    return best_order, best_seasonal_order

best_order, best_seasonal_order = sarima_optimizer_aic(train, pdq, seasonal_pdq)

############################
# Final Model
############################

model = SARIMAX(train, order=best_order, seasonal_order=best_seasonal_order)
sarima_final_model = model.fit()

y_pred_test = sarima_final_model.get_forecast(steps=24)

y_pred = y_pred_test.predicted_mean
y_pred = pd.Series(y_pred, index=test.index)

plot_energy_consumption(train, test, y_pred, "SARIMA")

##################################################
# MAE'ye Göre SARIMA Optimizasyonu
##################################################

p = d = q = range(0, 2)
pdq = list(itertools.product(p, d, q))
seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]


def sarima_optimizer_mae(train, pdq, seasonal_pdq):
    best_mae, best_order, best_seasonal_order = float("inf"), None, None
    for param in pdq:
        for param_seasonal in seasonal_pdq:
            try:
                model = SARIMAX(train, order=param, seasonal_order=param_seasonal)
                sarima_model = model.fit()
                y_pred_test = sarima_model.get_forecast(steps=24)
                y_pred = y_pred_test.predicted_mean
                mae = mean_absolute_error(test, y_pred)
                if mae < best_mae:
                    best_mae, best_order, best_seasonal_order = mae, param, param_seasonal
                print('SARIMA{}x{}12 - MAE:{}'.format(param, param_seasonal, mae))
            except:
                continue
    print('SARIMA{}x{}12 - MAE:{}'.format(best_order, best_seasonal_order, best_mae))
    return best_order, best_seasonal_order

best_order, best_seasonal_order = sarima_optimizer_mae(train, pdq, seasonal_pdq)

model = SARIMAX(train, order=best_order, seasonal_order=best_seasonal_order)
sarima_final_model = model.fit()

y_pred_test = sarima_final_model.get_forecast(steps=24)
y_pred = y_pred_test.predicted_mean
y_pred = pd.Series(y_pred, index=test.index)

plot_energy_consumption(train, test, y_pred, "SARIMA")

############################
# Final Model
############################

model = SARIMAX(y, order=best_order, seasonal_order=best_seasonal_order)
sarima_final_model = model.fit()
"""
feature_predict = sarima_final_model.get_forecast(steps=8)
feature_predict = feature_predict.predicted_mean

print(feature_predict)

a = feature_predict.reset_index()
a.columns = ["date", "predicted_mean"]

print(a)

a.index = a["date"]

df_ = df_.set_index("date")

df_

df_= df_[monthly_total_load_2020.index != "2020-09"]

df_

monthly_total_load_2020 = df_.groupby('date')['load'].sum().reset_index()
#evulation = monthly_total_load_2020.merge(predictions_df,on = index )

# Yüzdelik farkı hesapla
a['percent_diff'] = abs(df_['load'] - a['predicted_mean']) / abs(df_['load']) * 100

# Ortalama yüzdelik farkı hesapla
average_percent_diff = a['percent_diff'].mean()
print("Ortalama Yüzdelik Fark:", average_percent_diff)
"""
import pickle

# Modeli bir dosyaya kaydedin
with open('sarima_final_model.pkl', 'wb') as model_file:
    pickle.dump(sarima_final_model, model_file)


